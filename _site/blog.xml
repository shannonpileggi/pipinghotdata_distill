<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>PIPING HOT DATA</title>
    <link>https://www.pipinghotdata.com</link>
    <atom:link href="https://www.pipinghotdata.com/blog.xml" rel="self" type="application/rss+xml"/>
    <description>The personsal website of Shannon Pileggi
</description>
    <generator>Distill</generator>
    <lastBuildDate>Fri, 27 Aug 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>A tidyverse pivot approach to data preparation in R</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2021-08-27-a-tidyverse-pivot-approach-to-data-preparation-in-r</link>
      <description>Going from wide to long with #TidyTuesday beach volleyball</description>
      <guid>https://www.pipinghotdata.com/posts/2021-08-27-a-tidyverse-pivot-approach-to-data-preparation-in-r</guid>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2021-08-27-a-tidyverse-pivot-approach-to-data-preparation-in-r/gatherspread_modified.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Polished summary tables in R with gtsummary</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2021-07-14-polished-summary-tables-in-r-with-gtsummary</link>
      <description>Also plays well with labelled data</description>
      <guid>https://www.pipinghotdata.com/posts/2021-07-14-polished-summary-tables-in-r-with-gtsummary</guid>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2021-07-14-polished-summary-tables-in-r-with-gtsummary/r-gtsummary.png" medium="image" type="image/png" width="2540" height="1932"/>
    </item>
    <item>
      <title>Custom interactive sunbursts with ggplot in R</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r</link>
      <description>geom_rect() + geom_coord() + {ggiraph}</description>
      <guid>https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r</guid>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/sunburst_preview.PNG" medium="image" type="image/png" width="528" height="475"/>
    </item>
    <item>
      <title>Deploy previews with Netlifly</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2021-04-01-deploy-previews-with-netlifly</link>
      <description>Collaborative {distill} website workflows</description>
      <guid>https://www.pipinghotdata.com/posts/2021-04-01-deploy-previews-with-netlifly</guid>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2021-04-01-deploy-previews-with-netlifly/img/netlifly-checks.png" medium="image" type="image/png" width="1358" height="704"/>
    </item>
    <item>
      <title>R-Ladies styled code gifs with xaringan and flipbookr</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2021-03-08-r-ladies-styled-code-gifs-with-xaringan-and-flipbookr</link>
      <description>The code behind my @WeAreRLadies curating week</description>
      <guid>https://www.pipinghotdata.com/posts/2021-03-08-r-ladies-styled-code-gifs-with-xaringan-and-flipbookr</guid>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2021-03-08-r-ladies-styled-code-gifs-with-xaringan-and-flipbookr/walrus-adjusted.png" medium="image" type="image/png" width="1536" height="861"/>
    </item>
    <item>
      <title>GGanimating a geographic introduction</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2021-02-15-gganimating-a-geographic-introduction</link>
      <description>A gif for social media</description>
      <guid>https://www.pipinghotdata.com/posts/2021-02-15-gganimating-a-geographic-introduction</guid>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2021-02-15-gganimating-a-geographic-introduction/homes_preview.png" medium="image" type="image/png" width="919" height="461"/>
    </item>
    <item>
      <title>From gmailr to the Google Books API</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2021-01-11-from-gmailr-to-the-google-books-api</link>
      <description>A parenting project to catalog my childrens' 2020 library history</description>
      <guid>https://www.pipinghotdata.com/posts/2021-01-11-from-gmailr-to-the-google-books-api</guid>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2021-01-11-from-gmailr-to-the-google-books-api/preview_books.png" medium="image" type="image/png" width="705" height="459"/>
    </item>
    <item>
      <title>Leveraging labelled data in R</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-r</link>
      <description>


&lt;div class="figure"&gt;
&lt;img src="https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-rlabelled_preview.PNG" alt="Cute monster pointing to string banner with hex symbols for the labelled, haven, and sjlabelled pacakges." width="100%" /&gt;
&lt;p class="caption"&gt;
(#fig:unnamed-chunk-1)Artwork adapted from &lt;a href="https://twitter.com/allison_horst?lang=en"&gt;&lt;code&gt;@allison_horst&lt;/code&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="last-updated"&gt;Last updated&lt;/h1&gt;
&lt;p&gt;This post was last updated on 2021-09-14 to reflect package updates.&lt;/p&gt;
&lt;h1 id="tl-dr"&gt;TL; DR&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://haven.tidyverse.org/" target="_blank"&gt;&lt;code&gt;haven&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://larmarange.github.io/labelled/" target="_blank"&gt;&lt;code&gt;labelled&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://strengejacke.github.io/sjlabelled/articles/labelleddata.html" target="_blank"&gt;&lt;code&gt;sjlabelled&lt;/code&gt;&lt;/a&gt; packages can be used to effectively work with SPSS, SAS, and Stata data sets in R through implementation of the &lt;code&gt;haven_labelled&lt;/code&gt; class, which stores variable and value labels. Here are my most used functions for getting started with labelled data:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width="56%" /&gt;
&lt;col width="43%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;1. Import SPSS labelled data&lt;/td&gt;
&lt;td&gt;&lt;code&gt;haven::read_sav()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;2. Create data dictionary&lt;/td&gt;
&lt;td&gt;&lt;code&gt;labelled::generate_dictionary()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;3. Identify if variable is &lt;code&gt;haven_labelled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;haven::is.labelled()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;4. Convert &lt;code&gt;haven_labelled&lt;/code&gt; variables to numeric&lt;/td&gt;
&lt;td&gt;&lt;code&gt;base::as.numeric()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;5. Convert &lt;code&gt;haven_labelled&lt;/code&gt; variables to factors&lt;/td&gt;
&lt;td&gt;&lt;code&gt;haven::as_factor()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;6. Convert variable label to variable name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sjlabelled::label_to_colnames()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Labelled data traditionally, though not exclusively, arises in survey data. SAS, SPSS, and Stata have established infrastructures for labelled data, which consists of metadata in the form of variable and value labels. This post is for R users who already have a SPSS (&lt;code&gt;.sav&lt;/code&gt;), SAS (&lt;code&gt;.sas7bdat&lt;/code&gt;), or Stata (&lt;code&gt;.dta&lt;/code&gt;) data file and want to incorporate the labelled data features into their R workflow. With R‚Äôs &lt;code&gt;haven&lt;/code&gt;, &lt;code&gt;labelled&lt;/code&gt;, and &lt;code&gt;sjlabelled&lt;/code&gt; packages, you can leverage the inherent data labelling structure in these data sets to work interactively with variable and value labels, making it easier to navigate data while also allowing the user to convert metadata to data. This post discusses general characteristics of labelled data and practical tips for data analysis with labelled data.&lt;/p&gt;
&lt;aside&gt;
I work exclusively with SPSS (&lt;code&gt;.sav&lt;/code&gt;) data files, and so I have not evaluated this process on SAS (&lt;code&gt;.sas7bdat&lt;/code&gt;) or Stata (&lt;code&gt;.dta&lt;/code&gt;) data files. ü§û everything works the same!
&lt;/aside&gt;
&lt;h1 id="yrbss-labelled-data"&gt;YRBSS labelled data&lt;/h1&gt;
&lt;p&gt;The Youth Risk Behavior Surveillance System (YRBSS) is a publicly available data set from the Centers for Disease Control and Prevention (CDC) that ‚Äúmonitors health-related behaviors that contribute to the leading causes of death and disability among youth and adults.‚Äù On Aug 9, 2020, I downloaded YRBSS materials from the &lt;a href="https://www.cdc.gov/healthyyouth/data/yrbs/data.htm" target="_blank"&gt;CDC website&lt;/a&gt;. This site has both the the 2017 national data (&lt;code&gt;sadc_2017_national.dat&lt;/code&gt;) and the SPSS syntax to convert the &lt;code&gt;.dat&lt;/code&gt; file to an SPSS labelled data file (&lt;code&gt;2017_sadc_spss_input_program.sps&lt;/code&gt;). I do have an SPSS license, and I used the SPSS syntax to convert the &lt;code&gt;.dat&lt;/code&gt; file to an SPSS labelled data file (&lt;code&gt;sadc_2017_national.sav&lt;/code&gt;). As the &lt;code&gt;.sav&lt;/code&gt; data file is not available on the CDC site, you can download the &lt;code&gt;.sav&lt;/code&gt; data from my &lt;a href="https://github.com/shannonpileggi/pipinghotdata_distill/tree/master/_posts/2020-12-23-leveraging-labelled-data-in-r/data" target="_blank"&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="getting-started"&gt;Getting started&lt;/h1&gt;
&lt;p&gt;This material was developed using:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Software / package&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;4.0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;RStudio&lt;/td&gt;
&lt;td&gt;1.4.1103&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;code&gt;tidyverse&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;code&gt;here&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;code&gt;haven&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;code&gt;labelled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.8.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;code&gt;sjlabelled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.1.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)  # general use ----
library(here)       # file paths  ----
library(haven)      # import .sav files ----  
library(labelled)   # tools for labelled data ----
library(sjlabelled) # more tools for labelled data ----&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="importing-labelled-data"&gt;Importing labelled data&lt;/h1&gt;
&lt;p&gt;I use the &lt;a href="https://haven.tidyverse.org/" target="_blank"&gt;&lt;code&gt;haven&lt;/code&gt;&lt;/a&gt; package to import SPSS (&lt;code&gt;.sav&lt;/code&gt;) data files.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# import data ----
dat_raw &amp;lt;- haven::read_sav(here::here( &amp;quot;_posts&amp;quot;, &amp;quot;2020-12-23-leveraging-labelled-data-in-r&amp;quot;, &amp;quot;data&amp;quot;, &amp;quot;sadc_2017_national.sav&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Variables in a data set have a &lt;code&gt;class&lt;/code&gt;, which consists of assignments like &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;character&lt;/code&gt;, and &lt;code&gt;factor&lt;/code&gt;, among others. When labelled features are present, the &lt;code&gt;haven&lt;/code&gt; package assigns a class of &lt;code&gt;haven_labelled&lt;/code&gt;. This is important to know as many packages you work with may not have methods for &lt;code&gt;haven_labelled&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;When I first started working with SPSS data files, I also explored the &lt;a href="https://cran.r-project.org/web/packages/foreign/index.html" target="_blank"&gt;foreign&lt;/a&gt; package, which preceeds &lt;code&gt;haven&lt;/code&gt;. Using &lt;code&gt;foreign&lt;/code&gt; takes a bit longer than &lt;code&gt;haven&lt;/code&gt;, can result in truncation of long character variables, and produces a different labelled data structure compared to &lt;code&gt;haven&lt;/code&gt;. I have a strong preference for the &lt;code&gt;haven&lt;/code&gt; package.&lt;/p&gt;
&lt;h1 id="creating-a-data-dictionary"&gt;Creating a data dictionary&lt;/h1&gt;
&lt;p&gt;A data dictionary contains metadata about your data. The &lt;code&gt;labelled::generate_dictionary&lt;/code&gt; function can be used to create a data dictionary, extracted straight from your data. The usefulness of the data dictionary depends on the quality of your metadata.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# create data dictionary ----
dictionary &amp;lt;- labelled::generate_dictionary(dat_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is a data frame in my R environment with the number of observations equal to number of variables in the original data set. I can interactively explore the &lt;code&gt;dictionary&lt;/code&gt; in R to quickly find variables or documentation of interest. For example, I can find all variables related to ‚Äúweapons‚Äù with a search.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img src="https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-rgif/demo_dictionary3.gif" alt="5 variables containing the word weapon in the label appear, 2 of which are haven labelled class and 3 of which are numeric." width="100%" /&gt;
&lt;p class="caption"&gt;
(#fig:unnamed-chunk-5)Gif demonstrating search feature in data viewer utilized to find variables with the word &lt;code&gt;weapon&lt;/code&gt; in the data dictionary.
&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="identifying-labelled-features"&gt;Identifying labelled features&lt;/h1&gt;
&lt;p&gt;Standard data consists of variables (e.g., country) and values (e.g.¬†US, UK, CA). When working with labelled data, variables and values each have two features. Variables consist of a name and a label; values consist of a code and a label. For example, here are the features of the &lt;code&gt;q8&lt;/code&gt; variable.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Assignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Variable name&lt;/td&gt;
&lt;td&gt;q8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Variable label&lt;/td&gt;
&lt;td&gt;Seat belt use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Value codes&lt;/td&gt;
&lt;td&gt;1, 2, 3, 4, 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Value labels&lt;/td&gt;
&lt;td&gt;Never, Rarely, Sometimes, Most of the time, Always&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can see this information in the data dictionary - here is a snippet of the dictionary for three variables. The &lt;code&gt;value_labels&lt;/code&gt; field combines the value codes and value labels.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;dictionary %&amp;gt;% 
  dplyr::filter(variable %in% c(&amp;quot;q8&amp;quot;, &amp;quot;q11&amp;quot;, &amp;quot;q12&amp;quot;)) %&amp;gt;% 
  dplyr::select(variable, label, value_labels) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; variable label              
 q8       Seat belt use      
 q11      Texting and driving
 q12      Weapon carrying    
 value_labels                                                                                                                           
 [1] Never; [2] Rarely; [3] Sometimes; [4] Most of the time; [5] Always                                                                 
 [1] Did not drive; [2] 0 days; [3] 1 or 2 days; [4] 3 to 5 days; [5] 6 to 9 days; [6] 10 to 19 days; [7] 20 to 29 days; [8] All 30 days
 [1] 0 days; [2] 1 day; [3] 2 or 3 days; [4] 4 or 5 days; [5] 6 or more days                                                            &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To dive a bit deeper, you can see the &lt;code&gt;class&lt;/code&gt; of the &lt;code&gt;q8&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;dat_raw %&amp;gt;% 
  dplyr::pull(q8) %&amp;gt;% 
  class(.)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;haven_labelled&amp;quot; &amp;quot;vctrs_vctr&amp;quot;     &amp;quot;double&amp;quot;        &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and how the metadata of &lt;code&gt;q8&lt;/code&gt; is stored.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;dat_raw %&amp;gt;% 
  dplyr::select(q8) %&amp;gt;% 
  str(.)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tibble [203,663 x 1] (S3: tbl_df/tbl/data.frame)
 $ q8: dbl+lbl [1:203663]  2, NA,  4,  4,  1,  1,  3,  5,  4,  4,  ...
   ..@ label        : chr &amp;quot;Seat belt use&amp;quot;
   ..@ format.spss  : chr &amp;quot;F1.0&amp;quot;
   ..@ display_width: int 4
   ..@ labels       : Named num [1:5] 1 2 3 4 5
   .. ..- attr(*, &amp;quot;names&amp;quot;)= chr [1:5] &amp;quot;Never&amp;quot; &amp;quot;Rarely&amp;quot; &amp;quot;Sometimes&amp;quot; &amp;quot;Most of the time&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You don‚Äôt need to get into the weeds of this to work effectively with labelled data, but knowing this can help troubleshoot errors.&lt;/p&gt;
&lt;h1 id="viewing-labelled-features"&gt;Viewing labelled features&lt;/h1&gt;
&lt;p&gt;Beyond the dictionary, labelled features can also be seen when working with your data interactively. The console simultaneously prints value codes and labels side by side, with the code first followed by the label in brackets.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;dat_raw %&amp;gt;% 
  dplyr::select(q8, q11, q12) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 203,663 x 3
                      q8       q11                 q12
               &amp;lt;dbl+lbl&amp;gt; &amp;lt;dbl+lbl&amp;gt;           &amp;lt;dbl+lbl&amp;gt;
 1  2 [Rarely]                  NA  4 [4 or 5 days]   
 2 NA                           NA NA                 
 3  4 [Most of the time]        NA  3 [2 or 3 days]   
 4  4 [Most of the time]        NA  5 [6 or more days]
 5  1 [Never]                   NA  5 [6 or more days]
 6  1 [Never]                   NA  1 [0 days]        
 7  3 [Sometimes]               NA  2 [1 day]         
 8  5 [Always]                  NA  1 [0 days]        
 9  4 [Most of the time]        NA  5 [6 or more days]
10  4 [Most of the time]        NA NA                 
# ... with 203,653 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sometimes the alignment throws me a bit when I am reading this as the value codes and labels are left aligned, which places the value codes associated with &lt;code&gt;q12&lt;/code&gt; closer to &lt;code&gt;q11&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When viewing the data frame in RStudio, the data frame displays the variable label under the variable name; however, only value codes (and not value labels) are displayed.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img src="https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-rimg/demo_data2.PNG" alt="Screenshot provided for variables q8, q11, and q12." width="862" /&gt;
&lt;p class="caption"&gt;
(#fig:unnamed-chunk-10)Screenshot showing how haven labelled data appear in the viewer pane, with variable labels under the variable name, and value codes (not value labels) displayed.
&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="common-operations"&gt;Common operations&lt;/h1&gt;
&lt;p&gt;I primarily use three packages for working with labelled data: &lt;a href="https://haven.tidyverse.org/" target="_blank"&gt;&lt;code&gt;haven&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://larmarange.github.io/labelled/" target="_blank"&gt;&lt;code&gt;labelled&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://strengejacke.github.io/sjlabelled/articles/labelleddata.html" target="_blank"&gt;&lt;code&gt;sjlabelled&lt;/code&gt;&lt;/a&gt;. These three packages do have some overlap in functionality, in addition to naming schemes that differ but achieve the same objective (e.g., &lt;code&gt;haven::as_factor&lt;/code&gt; vs &lt;code&gt;sjlabelled::as_label&lt;/code&gt;), or naming schemes that are the same but achieve different objectives (e.g., &lt;code&gt;haven::as_factor&lt;/code&gt; vs &lt;code&gt;sjlabelled::as_factor&lt;/code&gt;). üò¨ To compound confusion, the concept of a &lt;em&gt;label&lt;/em&gt; can refer to either variable or value labels. Frequently, plural function names refer to value labels, as in &lt;code&gt;haven::zap_labels&lt;/code&gt; or &lt;code&gt;labelled::remove_val_labels&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are operations I commonly perform on labelled data:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;Evaluate if variable is of class &lt;code&gt;haven_labelled&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Why?&lt;/em&gt; Troubleshooting, exploring, mutating.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Function(s):&lt;/em&gt; &lt;code&gt;haven::is.labelled()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Convert &lt;code&gt;haven_labelled&lt;/code&gt; variable to &lt;code&gt;numeric&lt;/code&gt; value codes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Why?&lt;/em&gt; To treat the variable as continuous for analysis. For example, if a 1-7 rating scale imports as labelled and you want to compute a mean.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Function(s):&lt;/em&gt; &lt;code&gt;base::as.numeric()&lt;/code&gt; (strips variable of all metadata), &lt;code&gt;haven::zap_labels()&lt;/code&gt; and &lt;code&gt;labelled::remove_val_labels&lt;/code&gt; (removes value labels, retains other metadata)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Convert &lt;code&gt;haven_labelled()&lt;/code&gt; variable to &lt;code&gt;factor&lt;/code&gt; with value labels.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Why?&lt;/em&gt; To treat the variable as categorical for analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Function(s):&lt;/em&gt; &lt;code&gt;haven::as_factor()&lt;/code&gt;, &lt;code&gt;labelled::to_factor()&lt;/code&gt;, &lt;code&gt;sjlabelled::as_label()&lt;/code&gt;. As far as I can tell, these three functions have the same result. By default, the factor levels are ordered by value codes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Convert variable label to variable name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Why?&lt;/em&gt; For more informative or readable variable names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Function(s):&lt;/em&gt; &lt;code&gt;sjlabelled::label_to_colnames()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="example"&gt;Example&lt;/h1&gt;
&lt;p&gt;For this example, I reduce the data set to 2017 records only and select three variables related to carrying weapons and safety, all of which are measured on the same scale.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# retain info on weapons and safety for 2017 ----
dat_2017 &amp;lt;- dat_raw %&amp;gt;% 
  dplyr::filter(year == 2017) %&amp;gt;% 
  dplyr::select(record, q12, q13, q15) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# preview data ----
dat_2017&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 14,765 x 4
    record                q12        q13                q15
     &amp;lt;dbl&amp;gt;          &amp;lt;dbl+lbl&amp;gt;  &amp;lt;dbl+lbl&amp;gt;          &amp;lt;dbl+lbl&amp;gt;
 1 1509749 5 [6 or more days] 1 [0 days] 1 [0 days]        
 2 1509750 1 [0 days]         1 [0 days] 1 [0 days]        
 3 1509751 1 [0 days]         1 [0 days] 3 [2 or 3 days]   
 4 1509752 1 [0 days]         1 [0 days] 1 [0 days]        
 5 1509753 1 [0 days]         1 [0 days] 1 [0 days]        
 6 1509754 1 [0 days]         1 [0 days] 2 [1 day]         
 7 1509755 5 [6 or more days] 1 [0 days] 5 [6 or more days]
 8 1509756 1 [0 days]         1 [0 days] 1 [0 days]        
 9 1509757 1 [0 days]         1 [0 days] 1 [0 days]        
10 1509758 1 [0 days]         1 [0 days] 1 [0 days]        
# ... with 14,755 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code produces a bar plot showing the frequencies of the three variables from data as imported, displaying variable names and value codes.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# bar plot 1 ----
dat_2017 %&amp;gt;% 
   pivot_longer(
    cols = -1,
    names_to = &amp;quot;variable&amp;quot;,
    values_to = &amp;quot;days&amp;quot;
  ) %&amp;gt;% 
  count(variable, days) %&amp;gt;% 
  # include factor(days) to correctly show value codes in ggplot ----
  ggplot(aes(x = n, y = factor(days))) +
  facet_wrap(. ~ variable) +
  geom_col() &lt;/code&gt;&lt;/pre&gt;
&lt;div class="figure"&gt;
&lt;img src="file44ec5347f07_files/figure-html/bar-plot-1-1.png" alt="Bar plot 1 displays variable names and value codes" width="672" /&gt;
&lt;p class="caption"&gt;
(#fig:bar-plot-1)Bar plot 1 displays variable names and value codes
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now I add two lines of code to implement two changes - convert the variables to factors and convert the variable labels to variable names. This plot displays variable labels and value labels, producing a more informative figure.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# bar plot 2 ----
dat_2017 %&amp;gt;% 
  # --------------------------------------------------------------
  # change 1: convert haven_labelled variables to factors ----
  mutate_if(haven::is.labelled, haven::as_factor) %&amp;gt;% 
  # change 2: convert variable labels to variable names ----
  sjlabelled::label_to_colnames() %&amp;gt;% 
  # --------------------------------------------------------------
  pivot_longer(
    cols = -1,
    names_to = &amp;quot;variable&amp;quot;,
    values_to = &amp;quot;days&amp;quot;
  ) %&amp;gt;% 
  count(variable, days) %&amp;gt;% 
  # unnecessary to include factor(days) here as was already converted in change 1 ----
  ggplot(aes(x = n, y = days)) +
  facet_wrap(. ~ variable) +
  geom_col() &lt;/code&gt;&lt;/pre&gt;
&lt;div class="figure"&gt;
&lt;img src="file44ec5347f07_files/figure-html/bar-plot-2-1.png" alt="Bar plot 2 displays variable labels and value labels" width="672" /&gt;
&lt;p class="caption"&gt;
(#fig:bar-plot-2)Bar plot 2 displays variable labels and value labels
&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="other-packages-and-haven_labelled-objects"&gt;Other packages and &lt;code&gt;haven_labelled&lt;/code&gt; objects&lt;/h1&gt;
&lt;p&gt;It is probably safe to assume that most packages you work with don‚Äôt know how to handle the &lt;code&gt;haven_labelled&lt;/code&gt; class - if the package does produce a result, it is likely making an educated guess which may not be in line with your needs.&lt;/p&gt;
&lt;p&gt;For example, in using &lt;code&gt;ggplot&lt;/code&gt; for Figure @ref(fig:bar-plot-1) above, I included the line &lt;code&gt;y = factor(days)&lt;/code&gt;; if instead I had &lt;code&gt;y = days&lt;/code&gt; in Figure @ref(fig:bar-plot-1), &lt;code&gt;ggplot&lt;/code&gt; yields the following message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don‚Äôt know how to automatically pick scale for object of type haven_labelled/vctrs_vctr/double. Defaulting to continuous.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Treating the &lt;code&gt;days&lt;/code&gt; variable as continuous resulted in an uninformative plot (not shown), which was corrected by converting the variable to &lt;code&gt;factor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What about other packages I use? In &lt;a href="https://github.com/ropensci/skimr" target="_blank"&gt;&lt;code&gt;skimr&lt;/code&gt;&lt;/a&gt; 2.1.3 &lt;code&gt;haven_labelled&lt;/code&gt; inputs result in value codes treated as numeric values. In &lt;a href="http://www.danieldsjoberg.com/gtsummary/" target="_blank"&gt;&lt;code&gt;gtsummary&lt;/code&gt;&lt;/a&gt; ‚â•1.4.0 the &lt;em&gt;value labels&lt;/em&gt; of &lt;code&gt;haven_labelled&lt;/code&gt; variables are ignored and the underlying values are shown; however, a helpful message is printed with instructions to convert or remove the value labels. In general, you will probably find a mix of messages, warnings, errors, omissions, or guessing when using &lt;code&gt;haven_labelled&lt;/code&gt; variables with other packages. These issues can be resolved by converting the &lt;code&gt;haven_labelled&lt;/code&gt; variables to &lt;code&gt;numeric&lt;/code&gt; or &lt;code&gt;factor&lt;/code&gt;, depending on the context.&lt;/p&gt;
&lt;aside&gt;
Note: Although &lt;code&gt;gtsummary&lt;/code&gt; does not currently support value labels, it does support variable labels! See &lt;a href="https://twitter.com/WeAreRLadies/status/1363186751133667330?s=20" target="_blank"&gt;this tweet&lt;/a&gt; for a quick demo, and the &lt;a href="https://www.pipinghotdata.com/posts/2021-07-14-polished-summary-tables-in-r-with-gtsummary/" target="_blank"&gt;Polished summary tables in R with gtsummary&lt;/a&gt; blog post for more information.
&lt;/aside&gt;
&lt;h1 id="workflow-for-labelled-data-manipulation"&gt;Workflow for labelled data manipulation&lt;/h1&gt;
&lt;p&gt;When converting &lt;code&gt;haven_labelled&lt;/code&gt; objects to &lt;code&gt;factor&lt;/code&gt; or &lt;code&gt;numeric&lt;/code&gt;, be intentional about where the conversion happens in your workflow. The &lt;a href="https://cran.r-project.org/web/packages/labelled/vignettes/intro_labelled.html" target="_blank"&gt;Introduction to labelled&lt;/a&gt; vignette by Joseph Larmarange outlines two different approaches:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;First convert &lt;code&gt;haven_labelled&lt;/code&gt; variables; second perform data manipulation utilizing variable labels (if factor).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First perform data manipulation utilizing variable codes; second convert &lt;code&gt;haven_labelled&lt;/code&gt; variables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For me this question usually distills down to: for data manipulation, are the value codes or the value labels easier to work with? Sometimes the brevity of the value code helps (i.e., &lt;code&gt;q12 == 1&lt;/code&gt;), whereas other times the context of the value label makes the code more readable (i.e., &lt;code&gt;q12 == "0 days"&lt;/code&gt;). Note that the placement of the conversion can have downstream effects on your code.&lt;/p&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;haven&lt;/code&gt;, &lt;code&gt;labelled&lt;/code&gt;, &lt;code&gt;sjlabelled&lt;/code&gt; packages create new structures and work flows for labelled data that allow you to harness the power of R while still honoring the valuable metadata framework that exists in SPSS, SAS, and Stata data sets. The functions discussed in this post cover most of my daily needs with labelled data; if you want to do more, next steps might include handling specific types of coded missing data or creating labelled data within R.&lt;/p&gt;
&lt;h1 id="acknowledgments"&gt;Acknowledgments&lt;/h1&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.danieldsjoberg.com/" target="_blank"&gt;Daniel Sjoberg&lt;/a&gt; for the gentle nudge to update this post. ü§ó&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>ec91f54e05fa2f5d81e83e0404245f54</distill:md5>
      <guid>https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-r</guid>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-r/labelled_preview.png" medium="image" type="image/png" width="671" height="617"/>
    </item>
    <item>
      <title>Your first R package in 1 hour</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2020-10-25-your-first-r-package-in-1-hour</link>
      <description>Tools that make R package development easy</description>
      <guid>https://www.pipinghotdata.com/posts/2020-10-25-your-first-r-package-in-1-hour</guid>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2020-10-25-your-first-r-package-in-1-hour/workshop_thumnnail4.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Exporting editable ggplot graphics to PowerPoint with officer and purrr</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2020-09-22-exporting-editable-ggplot-graphics-to-powerpoint-with-officer-and-purrr</link>
      <description>What, why, how, when, and who</description>
      <guid>https://www.pipinghotdata.com/posts/2020-09-22-exporting-editable-ggplot-graphics-to-powerpoint-with-officer-and-purrr</guid>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2020-09-22-exporting-editable-ggplot-graphics-to-powerpoint-with-officer-and-purrr/data_cowboy_officer.png" medium="image" type="image/png" width="678" height="382"/>
    </item>
    <item>
      <title>Introducing RStudio and R Markdown</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown</link>
      <description>Gettin' giffy wit it.</description>
      <guid>https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown</guid>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown/introducing_resize2.png" medium="image" type="image/png" width="473" height="371"/>
    </item>
    <item>
      <title>A job interview presentation inspired by the R community</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2020-08-30-a-job-interview-presentation-inspired-by-the-r-community</link>
      <description>How #tidytuesday and twitter helped me secure a job offer</description>
      <guid>https://www.pipinghotdata.com/posts/2020-08-30-a-job-interview-presentation-inspired-by-the-r-community</guid>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2020-08-30-a-job-interview-presentation-inspired-by-the-r-community/welcome_to_rstats_twitter.png" medium="image" type="image/png" width="2009" height="1942"/>
    </item>
    <item>
      <title>Stringr 4 ways</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2018-12-11-stringr-4-ways</link>
      <description>Four approaches to feature engineering with regular expressions in R</description>
      <guid>https://www.pipinghotdata.com/posts/2018-12-11-stringr-4-ways</guid>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2018-12-11-stringr-4-ways/table2.png" medium="image" type="image/png" width="1010" height="319"/>
    </item>
    <item>
      <title>Welcome to Piping Hot Data</title>
      <dc:creator>Shannon Pileggi</dc:creator>
      <link>https://www.pipinghotdata.com/posts/2018-11-05-welcome-to-piping-hot-data</link>
      <description>What's in a name?</description>
      <guid>https://www.pipinghotdata.com/posts/2018-11-05-welcome-to-piping-hot-data</guid>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      <media:content url="https://www.pipinghotdata.com/posts/2018-11-05-welcome-to-piping-hot-data/tidyverse_celestial.png" medium="image" type="image/png" width="2048" height="2048"/>
    </item>
  </channel>
</rss>
